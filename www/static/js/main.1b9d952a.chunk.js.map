{"version":3,"sources":["logo.svg","images/WebXpay-Logo.png","components/Root.js","components/Splash.js","MainScript.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Root","React","Component","render","createElement","className","this","props","children","Splash","constructor","super","onChange","bind","payNow","state","payment_value","plainText","first_name","last_name","email","contact_number","address_line_one","process_currency","custom_fields","secret_key","payment","fields","errors","field","e","target","value","setState","name","handleValidation","console","log","formIsValid","match","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","contactSubmit","preventDefault","alert","key","require","text","Math","random","amount","encrypted","encrypt","$","append","document","getElementById","submit","componentDidMount","Container","maxWidth","Card","variant","CardActionArea","CardMedia","image","title","CardContent","Typography","color","gutterBottom","component","Grid","container","spacing","alignItems","item","Person","TextField","type","id","label","error","helperText","Email","Phone","ContactMail","AttachMoney","CardActions","Button","onClick","style","float","MainScript","Router","history","hashHistory","HashRouter","Route","path","IndexRoute","App","isLocalhost","Boolean","window","location","hostname","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","concat","fetch","headers","then","response","contentType","get","status","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","startApp","ReactDOM","StrictMode","cordova","message"],"mappings":"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","file":"static/js/main.1b9d952a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/WebXpay-Logo.0db3043f.png\";","import React from 'react';\n\n\nexport class Root extends React.Component {\n\n\n    render() {\n        return (\n            <div className=\"page\">\n                <div className=\"\">\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport {Link, hashHistory} from \"react-router\";\nimport JSEncrypt from 'jsencrypt';\nimport axios from \"axios\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport {Person,Email,ContactMail,Phone,AttachMoney} from '@material-ui/icons';\nimport Container from '@material-ui/core/Container';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport '../css/page_style.css'\n\nimport $ from \"jquery\";\n\n\nexport class Splash extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n        this.payNow = this.payNow.bind(this);\n        this.state = {\n            payment_value: [],\n            plainText: '',\n            first_name: '',\n            last_name: '',\n            email: '',\n            contact_number: '',\n            address_line_one: '',\n            process_currency: '',\n            custom_fields: '',\n            secret_key: '',\n            payment: '',\n            fields: {},\n            errors: {}\n\n        };\n\n\n    }\n\n    /* handleChange(field, e){\n         let fields = this.state.fields;\n         fields[field] = e.target.value;\n         this.setState({fields});\n     }*/\n\n    onChange(field, e) {\n        let fields = this.state.fields;\n        fields[field] = e.target.value;\n\n        this.setState({fields});\n            this.setState({\n                 [e.target.name]: e.target.value,\n             })\n\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        console.log(this.state.fields);\n        let errors = {};\n        let formIsValid = true;\n\n        if (!fields[\"first_name\"]) {\n            formIsValid = false;\n            errors[\"first_name\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"last_name\"]) {\n            formIsValid = false;\n            errors[\"last_name\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"contact_number\"]) {\n            formIsValid = false;\n            errors[\"contact_no\"] = \"Cannot be empty\";\n        }\n\n        if (typeof fields[\"contact_number\"] !== \"undefined\") {\n            if (!fields[\"contact_number\"].match(/^[0-9]*$/)) {\n                formIsValid = false;\n                errors[\"contact_no\"] = \"Enter Only Numbers\";\n            }\n        }\n        if (!fields[\"address_line_one\"]) {\n            formIsValid = false;\n            errors[\"address\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"amount\"]) {\n            formIsValid = false;\n            errors[\"payment_amount\"] = \"Cannot be empty\";\n        }\n\n        //Name\n        /*  if(!fields[\"first_name\"]){\n              formIsValid = false;\n              errors[\"name\"] = \"Cannot be empty\";\n          }\n\n          if(typeof fields[\"name\"] !== \"undefined\"){\n              if(!fields[\"name\"].match(/^[a-zA-Z]+$/)){\n                  formIsValid = false;\n                  errors[\"name\"] = \"Only letters\";\n              }\n          }*/\n\n        //Email\n        if (!fields[\"email\"]) {\n            formIsValid = false;\n            errors[\"email\"] = \"Cannot be empty\";\n        }\n\n        if (typeof fields[\"email\"] !== \"undefined\") {\n            let lastAtPos = fields[\"email\"].lastIndexOf('@');\n            let lastDotPos = fields[\"email\"].lastIndexOf('.');\n\n            if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') == -1 && lastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\n                formIsValid = false;\n                errors[\"email\"] = \"Email is not valid\";\n            }\n        }\n\n        this.setState({errors: errors});\n        return formIsValid;\n    }\n\n    contactSubmit(e) {\n        e.preventDefault();\n\n        if (this.handleValidation()) {\n            alert(\"Form submitted\");\n        } else {\n            alert(\"Form has errors.\")\n        }\n\n    }\n\n\n    payNow(e) {\n\n        const NodeRSA = require('node-rsa');\n        const key = new NodeRSA('-----BEGIN PUBLIC KEY-----\\n' +\n            'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDRg2S31xYCmYHXB2S3Duh+0ESq\\n' +\n            'e/U8DdQ0bqNQs7q041cwh/7bz7bAgjfGawbntBT2Lx9STUc0uga9Pa8RpfPmIoZi\\n' +\n            'A4U6OMCIinAiePfxbVHx+K3qEYv2w5PeH70+pk+OhySQrnOm11SMnjR1pewbWwE2\\n' +\n            'hboMuuBBDt0s/CV7WQIDAQAB\\n' +\n            '-----END PUBLIC KEY-----');\n\n        const min = 1;\n        const max = 100;\n        const rand = min + Math.random() * (max - min);\n\n\n        let price = this.state.amount;\n        let order_id = rand;\n        let text = order_id + '|' + price;\n        const encrypted = key.encrypt(text, 'base64');\n        console.log(text);\n\n        if (this.handleValidation()) {\n            $('.something').append('<form action=\"https://stagingxpay.info/index.php?route=checkout/billing\" name=\"vote\" id=\"vote\" method=\"post\" style=\"display:none;\">' +\n                '<input type=\"text\" name=\"first_name\" value=\"' + this.state.first_name + '\" />' +\n                '<input type=\"text\" name=\"last_name\" value=\"' + this.state.last_name + '\" />' +\n                '<input type=\"text\" name=\"email\" value=\"' + this.state.email + '\" />' +\n                '<input type=\"text\" name=\"contact_number\" value=\"' + this.state.contact_number + '\" />' +\n                '<input type=\"text\" name=\"address_line_one\" value=\"' + this.state.address_line_one + '\" />' +\n                '<input type=\"text\" name=\"process_currency\" value=\"' + 'LKR' + '\" />' +\n                '<input type=\"text\" name=\"secret_key\" value=\" 83bd6d73-aac4-4959-84af-2feb91bee16f\" />' +\n                '<input type=\"text\" name=\"custom_fields\" value=\"\" />' +\n                '<input type=\"text\" name=\"payment\" value=\"' + encrypted + '\" />' +\n                '</form>');\n            document.getElementById(\"vote\").submit();\n        } else {\n\n        }\n\n\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n\n        console.log(this.state.errors);\n\n\n        return (\n\n            <div>\n\n                <Container maxWidth=\"sm\">\n                    <Card className=\"root\" variant=\"outlined\">\n                        <CardActionArea>\n                            <CardMedia\n                                className=\"media\"\n                                image={require('../images/WebXpay-Logo.png')}\n                                title=\"Contemplative Reptile\"\n                            />\n                        </CardActionArea>\n                    </Card>\n                <Card className=\"root\" variant=\"outlined\">\n                    <CardContent>\n                        <Typography className=\"title\" color=\"textSecondary\" gutterBottom>\n                            Fill the Details\n                        </Typography>\n                        <Typography variant=\"h5\" component=\"h2\">\n\n\n                            <Grid container spacing={1} alignItems=\"flex-end\">\n                                <Grid item>\n                                    <Person/>\n                                </Grid>\n                                <Grid item>\n                                    <TextField type=\"text\" id=\"first_name\" name=\"first_name\" label=\"First Name\"\n                                               onChange={this.onChange.bind(this, \"first_name\")}\n                                               error={this.state.errors['first_name']}\n                                               helperText={this.state.errors['first_name']}\n                                    />\n                                </Grid>\n                            </Grid>\n\n\n                            <Grid container spacing={1} alignItems=\"flex-end\">\n                                <Grid item>\n                                    <Person/>\n                                </Grid>\n                                <Grid item>\n                                    <TextField type=\"text\" name=\"last_name\"\n                                               onChange={this.onChange.bind(this, \"last_name\")}\n                                               label=\"Last Name\"\n                                               error={this.state.errors['last_name']}\n                                               helperText={this.state.errors['last_name']}\n                                    />\n                                </Grid>\n                            </Grid>\n\n                            <Grid container spacing={1} alignItems=\"flex-end\">\n                                <Grid item>\n                                   <Email/>\n                                </Grid>\n                                <Grid item>\n                                    <TextField type=\"text\" name=\"email\"\n                                               onChange={this.onChange.bind(this, \"email\")}\n                                               label=\"E-Mail\"\n                                               error={this.state.errors['email']}\n                                               helperText={this.state.errors['email']}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <Grid container spacing={1} alignItems=\"flex-end\">\n                                <Grid item>\n                                    <Phone/>\n                                </Grid>\n                                <Grid item>\n                                    <TextField type=\"text\" name=\"contact_number\"\n                                               onChange={this.onChange.bind(this, \"contact_number\")}\n                                               label=\"Contact No\"\n                                               error={this.state.errors['contact_no']}\n                                               helperText={this.state.errors['contact_no']}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <Grid container spacing={1} alignItems=\"flex-end\">\n                                <Grid item>\n                                   <ContactMail/>\n                                </Grid>\n                                <Grid item>\n                                    <TextField type=\"text\" name=\"address_line_one\"\n                                               onChange={this.onChange.bind(this, \"address_line_one\")}\n                                               label=\"Address\"\n                                               error={this.state.errors['address']}\n                                               helperText={this.state.errors['address']}\n                                    />\n                                </Grid>\n                            </Grid>\n\n                            <Grid container spacing={1} alignItems=\"flex-end\">\n                                <Grid item>\n                                    <AttachMoney/>\n                                </Grid>\n                                <Grid item>\n                                    <TextField type=\"text\" name=\"amount\"\n                                               onChange={this.onChange.bind(this, \"amount\")}\n                                               label=\"Payment Amount\"\n                                               error={this.state.errors['payment_amount']}\n                                               helperText={this.state.errors['payment_amount']}\n                                    />\n                                </Grid>\n                            </Grid>\n\n\n                        </Typography>\n\n                    </CardContent>\n                    <CardActions>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.payNow} style={{float: \"right\"}}>\n                            Pay Now\n                        </Button>\n                    </CardActions>\n                </Card>\n                <div id=\"outer-container\" className=\"container-fluid transiton-activatedg\">\n                    <div id=\"inside-container\" className=\"container\">\n                        <div className=\"row row_clr\">\n                            <div className=\"something\"></div>\n\n                            {/* <h5>Fill the details</h5>\n\n                            First Name <input type=\"text\" id=\"first_name\" name=\"first_name\"\n                                              onChange={this.onChange}/><br/>\n                            Last Name <input type=\"text\" name=\"last_name\" onChange={this.onChange}/><br/>\n                            E-Mail <input type=\"text\" name=\"email\" onChange={this.onChange}/><br/>\n                            Contact No <input type=\"text\" name=\"contact_number\" onChange={this.onChange}/><br/>\n                            Address Line 1 <input type=\"text\" name=\"address_line_one\" onChange={this.onChange}/><br/>\n                            CURRENCY<input type=\"text\" name=\"process_currency\" value=\"LKR\"\n                                           onChange={this.onChange}/><br/>\n                                          Payment Gateway ID <input type=\"text\" name=\"payment_gateway_id\" value=\"\"/><br/>\n                            Custom Fields <input type=\"text\" name=\"custom_fields\" onChange={this.onChange}/><br/>\n                            <input id=\"submit_btn\" type=\"submit\" value=\"Pay Now\" />\n*/}\n                        </div>\n                    </div>\n                </div>\n                </Container>\n            </div>\n\n\n        );\n    }\n\n}\n\n\n","import React from 'react';\nimport {Router,Route,hashHistory,IndexRoute } from \"react-router\";\nimport { HashRouter } from 'react-router-dom';\n\nimport './App.css';\n\n\nimport {render} from \"react-dom\";\n\n// All Screens\n/*import {Header} from \"./components/Header\";*/\nimport {Root} from \"./components/Root\";\nimport {Splash} from \"./components/Splash\";\n\n\n\nexport class MainScript extends React.Component {\n\n    render() {\n        return(\n            <Router history={hashHistory }>\n                <HashRouter>\n                    <Route path={\"/\"} component={Root}>\n                        <IndexRoute component={Splash}/>\n\n\n\n                        {/* <Route path={\"welcomeclub/:id\"} component={WelcomeClub}/>*/}\n                       {/* <Route path={\"/maps\"} component={Home}/>*/}\n                     {/*   <Route path={\"info/:id\"} component={Info}/>\n                        <Route path={\"/check\"} component={AutoComplete}/>*/}\n\n\n                    </Route>\n                </HashRouter>\n            </Router>\n        );\n    }\n\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {MainScript} from \"./MainScript\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <MainScript/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst startApp =()=>{\n    ReactDOM.render(\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n    serviceWorker.register();\n};\n\nif(window.cordova){\n    document.addEventListener('deviceready',startApp,false);\n}else{\n    startApp();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}